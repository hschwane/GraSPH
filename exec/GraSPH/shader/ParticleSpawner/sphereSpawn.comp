#version 450
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"
#include "random.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_VELOCITY_BUFFER_BINDING,std430) buffer ParticleVelocities
{
    vec4 velocities[];
};

layout(binding=PARTICLE_ACCELERATION_BUFFER_BINDING,std430) buffer ParticleAccelerations
{
    vec4 accelerations[];
};

layout(binding=PARTICLE_HYDRO_BUFFER_BINDING,std430) buffer ParticleHydro
{
    vec4 hydro[];
};

layout(binding=PARTICLE_SMLENGTH_BUFFER_BINDING,std430) buffer ParticleSmlength
{
    float smlength[];
};

layout(binding=PARTICLE_TIMESTEP_BUFFER_BINDING,std430) buffer ParticleTimestep
{
    float timestep[];
};


layout(local_size_variable) in;

uniform vec3 center;
uniform float radius;
uniform float mass;
uniform uint num_of_particles;
uniform uint particle_offset =0;
uniform float initial_smlength=0.3;

uniform uint accMulti=1;
uniform uint hydMulti=1;

uniform uint random_seed;

void main()
{
    if(gl_GlobalInvocationID.x > num_of_particles)
        return;

    // generate a random position
    uint seed = random_seed*gl_GlobalInvocationID.x;
    vec2 hammersley = genHammersleySet(seed, num_of_particles);
    vec3 randomPos = randSphere( hammersley.x, hammersley.y,rand(seed),radius);

    int i = 1;
    while(length(randomPos) < 3 || randomPos.y > 0.5 || randomPos.y < -0.5)
    {
        vec2 hammersley = genHammersleySet(seed+i, num_of_particles);
        randomPos = randSphere( hammersley.x, hammersley.y,rand(seed),radius);
        i++;
    }
    positions[gl_GlobalInvocationID.x+particle_offset] = vec4(randomPos + center, mass);

    // set all the attributes
    velocities[gl_GlobalInvocationID.x+particle_offset] = vec4(0,0,0,0);
    smlength[gl_GlobalInvocationID.x] = initial_smlength;
    timestep[gl_GlobalInvocationID.x] = 0;

    for(uint i=0; i<accMulti; i++ )
        accelerations[gl_GlobalInvocationID.x+particle_offset + i*num_of_particles] = vec4(0,0,0,0);

    for(uint i=0; i<hydMulti; i++ )
        hydro[gl_GlobalInvocationID.x+particle_offset + i*num_of_particles] = vec4(0,0,0,0);
}
