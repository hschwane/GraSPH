#version 450 core
// we have to use a fixed work group size here

#include "common.glsl"
#include "kernel.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_VELOCITY_BUFFER_BINDING,std430) buffer ParticleVelocities
{
    vec4 velocities[];
};

layout(binding=PARTICLE_ACCELERATION_BUFFER_BINDING,std430) buffer ParticleAccelerations
{
    vec4 accelerations[];
};

layout(binding=PARTICLE_HYDRO_BUFFER_BINDING,std430) buffer ParticleHydro
{
    vec4 hydro[];
};

layout(binding=PARTICLE_SMLENGTH_BUFFER_BINDING,std430) buffer ParticleSmlength
{
    float smlength[];
};

layout(local_size_x=WGSIZE,local_size_y=1,local_size_z=1) in;

uniform float eps_factor2;
uniform float alpha; // controle viscosity
uniform float balsara_strength;
uniform float adaptive_balsara_lowth;
uniform float adaptive_balsara_highth;

uniform bool enableSelfGravity;

shared vec4 pos[gl_WorkGroupSize.x];
shared vec4 hyd[gl_WorkGroupSize.x];
shared float h[gl_WorkGroupSize.x];
shared vec4 vel[gl_WorkGroupSize.x];

// This shader updates a particles acceleration by interacting with all other particles,
// using shared memory to speed up memory access
void main()
{
    // there can be multiple threads per particle, so figure out where we start calculating
    const uint startTile = TILES_PER_THREAD * uint(gl_GlobalInvocationID.x / NUM_PARTICLES);
    const uint idxi = gl_GlobalInvocationID.x % NUM_PARTICLES;

    // cache my particle attributes in local memory
    const vec4 hydroi = hydro[idxi];
    const vec4 posi = positions[idxi];
    const float hi = smlength[idxi];
    const vec4 veli = velocities[idxi];

    vec3 acc = vec3(0); // lets sum up the acceleration here
    float maxVsig = 0; // needed for the timestep criterion

    // calculate some values that are the same for all loop iterations
    const float pod2i = (hydroi.PRESSURE / (hydroi.DENSITY * hydroi.DENSITY));
    const float hiSpikyGradFactor = spikyGradFactor(hi);

    // loop over tiles in a row for as many tiles one thread is configured to calculate
    // calculate the interactions of a particle with gl_WorkGroupSize.x particles in one tile
    // repeat until all interactions in all tiles are calculatedsss
    for(uint tile = 0; tile < TILES_PER_THREAD; tile++)
    {
        // fill fields in shared memory
        const uint tileStartIndex = gl_WorkGroupSize.x * (startTile + tile); // the index in the global buffer where this tile begins
        const uint idx= tileStartIndex + gl_LocalInvocationID.x;
        pos[gl_LocalInvocationID.x] = positions[idx];
        hyd[gl_LocalInvocationID.x] = hydro[idx];
        h[gl_LocalInvocationID.x] = smlength[idx];
        vel[gl_LocalInvocationID.x] = velocities[idx];

        memoryBarrierShared();
        barrier();

        // calculate the row up to here use sink function if this is a sink particle
        for(uint j=0; j<gl_WorkGroupSize.x; j++) // go over everything in this tile
        {
            const vec4 posj = pos[j];
            const float hj = h[j];
            const vec4 hydroj = hyd[j];
            const vec4 velj = vel[j];

            const vec3 rij = posi.POSITION - posj.POSITION; // vector from i to j
            const float r2 = dot(rij,rij);
            const float r = sqrt(r2); // distance from i to j

            if(r > 0) // stop calculation here if the particles are the same
            {
                // gravity
                if(enableSelfGravity)
                    acc += posj.MASS * -rij / sqrt(pow(r2+(hi*hj*eps_factor2),3));

                // pressure
                const float pod2j = hydroj.PRESSURE / (hydroj.DENSITY * hydroj.DENSITY);

                const vec3 gradi = WspikyGrad(rij,r,hi,hiSpikyGradFactor);
                const vec3 gradj = WspikyGrad(rij,r,hj);

                acc -= posj.MASS * (hydroi.DH_DENSITY_FACTOR*pod2i* gradi + hydroj.DH_DENSITY_FACTOR*pod2j* gradj);

                // viscosity
                const float wij = dot(rij, veli.VELOCITY - velj.VELOCITY)/r;
                if(wij < 0)
                {
                    const float vsig = veli.SPEED_OF_SOUND + velj.SPEED_OF_SOUND - 3.0*wij;
                    const float rhoij = (hydroi.DENSITY + hydroj.DENSITY)*0.5;
#ifdef ADAPTIVE_BALSARA
                    const float bs = 1-smoothstep( adaptive_balsara_lowth, adaptive_balsara_highth,hydroi.DENSITY);
                    const float fij = 1- bs *( 1-( 0.5*( hydroi.BASWITCH+hydroj.BASWITCH)));
#else
                    const float fij = 1- balsara_strength*( 1-( 0.5*( hydroi.BASWITCH+hydroj.BASWITCH)));
#endif
                    const float II = -0.5 * fij* alpha * wij * vsig / rhoij;

                    maxVsig = max(maxVsig,vsig);
                    acc -=  posj.MASS  * II * (gradi+gradj)*0.5f;
                }
                else
                {
                    maxVsig = max(maxVsig,veli.SPEED_OF_SOUND + velj.SPEED_OF_SOUND);
                }
            }
        }

        memoryBarrierShared();
        barrier();
    }

    accelerations[gl_GlobalInvocationID.x] = vec4(acc,maxVsig);
}